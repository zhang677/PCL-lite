test_name: bmm_03
inputs:
  - name: E0
    dtype: fp32
    dims: [K, N, M]
    data_gen: torch.randn
  - name: E1
    dtype: fp32
    dims: [K, D, M]
    data_gen: torch.randn

fns:
  - name: Mul
    apply: |
      return [input[0] * input[1]]
    input_dtype: [fp32, fp32]
    output_dtype: fp32
    func_name: fn_mul
  
  - name: Sum
    apply: |
      return [state[0] + input[0]]
    init: [0]
    input_dtype: fp32
    output_dtype: fp32
    func_name: fn_sum

outputs:
  - name: S0
    dtype: fp32
    dims: [D, N, M]
    data_transform:
      - |
        torch.einsum('mnk,mdk->mnd', input_data['E0'], input_data['E1'])

impl: |
  E2 = step.Bufferize(a=1).apply(E0) # [N, M] of [K]
  E3 = step.Repeat(n=D).apply(E2) # [D, N, M] of [K]
  E4 = step.Streamify().apply(E3) # [K, D, N, M]
  E5 = step.Bufferize(a=2).apply(E1) # [M] of [K, D]
  E6 = step.Repeat(n=N).apply(E5) # [N, M] of [K, D]
  E7 = step.Streamify().apply(E6) # [K, D, N, M]
  E8 = step.Zip().apply((E4, E7)) # [K, D, N, M]
  E9 = step.Map(fn=fn_mul).apply(E8) # [K, D, N, M]
  E10 = step.Accum(fn=fn_sum, b=1).apply(E9) # [D, N, M]
  return E10

