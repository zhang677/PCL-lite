test_name: bmm_02
inputs:
  - name: E0
    dtype: fp32
    dims: [K, N, M]
    data_gen: torch.randn
  - name: E1
    dtype: fp32
    dims: [D, K, M]
    data_gen: torch.randn

fns:
  - name: Mul
    apply: |
      return [input[0] * input[1]]
    input_dtype: [fp32, "Buffer(fp32, [D])"]
    output_dtype: Buffer(fp32, [D])
    func_name: fn_mul
  
  - name: Sum
    apply: |
      return [state[0] + input[0]]
    init: [0]
    input_dtype: Buffer(fp32, [D])
    output_dtype: Buffer(fp32, [D])
    func_name: fn_sum

outputs:
  - name: S0
    dtype: fp32
    dims: [D, N, M]
    data_transform:
      - |
        torch.einsum('mnk,mkd->mnd', input_data['E0'], input_data['E1'])

impl: |
  E2 = step.Bufferize(a=2).apply(E1)
  E3 = step.Repeat(n=N).apply(E2)
  E4 = step.Streamify().apply(E3)
  E5 = step.Bufferize(a=1).apply(E4)
  E6 = step.Zip().apply((E0, E5))
  E7 = step.Map(fn=fn_mul).apply(E6)
  E8 = step.Accum(fn=fn_sum, b=1).apply(E7)
  E9 = step.Streamify().apply(E8)
  return E9

